
relayboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004e4  00000578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800060  00800060  00000578  2**0
                  ALLOC
  3 .stab         00001f38  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001106  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000035b6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	5f c1       	rjmp	.+702    	; 0x2dc <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	ac 37       	cpi	r26, 0x7C	; 124
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	2f d2       	rcall	.+1118   	; 0x49a <main>
  3c:	51 c2       	rjmp	.+1186   	; 0x4e0 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_5>:
    }
}

// prescaler 1024 gives 30.5Hz
ISR(TIMER0_OVF_vect)
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	2f 93       	push	r18
  4c:	3f 93       	push	r19
  4e:	4f 93       	push	r20
  50:	5f 93       	push	r21
  52:	6f 93       	push	r22
  54:	7f 93       	push	r23
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
  5a:	af 93       	push	r26
  5c:	bf 93       	push	r27
  5e:	ef 93       	push	r30
  60:	ff 93       	push	r31
  // increment relay timer
  relay_timer_inc(); 
  62:	82 d0       	rcall	.+260    	; 0x168 <relay_timer_inc>
}
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	bf 91       	pop	r27
  6a:	af 91       	pop	r26
  6c:	9f 91       	pop	r25
  6e:	8f 91       	pop	r24
  70:	7f 91       	pop	r23
  72:	6f 91       	pop	r22
  74:	5f 91       	pop	r21
  76:	4f 91       	pop	r20
  78:	3f 91       	pop	r19
  7a:	2f 91       	pop	r18
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <relay_set_on>:
static uint32_t maxon_time = 0;
static uint8_t error = 0;
static void set_error(uint8_t);

void relay_set_on(void)
{
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  if (water_low())
  8a:	69 d1       	rcall	.+722    	; 0x35e <water_low>
  8c:	88 23       	and	r24, r24
  8e:	51 f0       	breq	.+20     	; 0xa4 <relay_set_on+0x1e>
}

// only set error if there isn't one already
static void set_error(uint8_t new_error)
{
  if (relay_get_status() == RELAY_NO_ERROR)
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	81 11       	cpse	r24, r1
  96:	03 c0       	rjmp	.+6      	; 0x9e <relay_set_on+0x18>
    {
      error = new_error;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 60 00 	sts	0x0060, r24
	  // turn relay on, if not yet running
	  *relay_port |= (uint8_t)(1<<relay_pin); // write to port
	  timer_clear(); // reset timer, start counting up
	}
    }
}
  9e:	1f 91       	pop	r17
  a0:	0f 91       	pop	r16
  a2:	08 95       	ret
  return timer_get();
}

uint8_t relay_running(void)
{
  if (*relay_port & (1<<relay_pin))
  a4:	e0 91 6a 00 	lds	r30, 0x006A
  a8:	f0 91 6b 00 	lds	r31, 0x006B
  ac:	80 81       	ld	r24, Z
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	00 90 69 00 	lds	r0, 0x0069
  b4:	02 c0       	rjmp	.+4      	; 0xba <relay_set_on+0x34>
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <relay_set_on+0x30>
  be:	80 fd       	sbrc	r24, 0
  c0:	ee cf       	rjmp	.-36     	; 0x9e <relay_set_on+0x18>
      set_error(RELAY_ERROR_WATER_LOW);
    }
  else if (!relay_running())
    {
      // relay not running yet
      if (timer_get() < cooldown_time)
  c2:	f2 d0       	rcall	.+484    	; 0x2a8 <timer_get>
  c4:	00 91 65 00 	lds	r16, 0x0065
  c8:	10 91 66 00 	lds	r17, 0x0066
  cc:	20 91 67 00 	lds	r18, 0x0067
  d0:	30 91 68 00 	lds	r19, 0x0068
  d4:	60 17       	cp	r22, r16
  d6:	71 07       	cpc	r23, r17
  d8:	82 07       	cpc	r24, r18
  da:	93 07       	cpc	r25, r19
  dc:	40 f4       	brcc	.+16     	; 0xee <relay_set_on+0x68>
}

// only set error if there isn't one already
static void set_error(uint8_t new_error)
{
  if (relay_get_status() == RELAY_NO_ERROR)
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	81 11       	cpse	r24, r1
  e4:	dc cf       	rjmp	.-72     	; 0x9e <relay_set_on+0x18>
    {
      error = new_error;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 60 00 	sts	0x0060, r24
  ec:	d8 cf       	rjmp	.-80     	; 0x9e <relay_set_on+0x18>
	  set_error(RELAY_ERROR_COOLDOWN);
	}
      else
	{
	  // turn relay on, if not yet running
	  *relay_port |= (uint8_t)(1<<relay_pin); // write to port
  ee:	e0 91 6a 00 	lds	r30, 0x006A
  f2:	f0 91 6b 00 	lds	r31, 0x006B
  f6:	20 81       	ld	r18, Z
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	00 90 69 00 	lds	r0, 0x0069
 100:	02 c0       	rjmp	.+4      	; 0x106 <relay_set_on+0x80>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <relay_set_on+0x7c>
 10a:	28 2b       	or	r18, r24
 10c:	20 83       	st	Z, r18
	  timer_clear(); // reset timer, start counting up
	}
    }
}
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
	}
      else
	{
	  // turn relay on, if not yet running
	  *relay_port |= (uint8_t)(1<<relay_pin); // write to port
	  timer_clear(); // reset timer, start counting up
 112:	9e c0       	rjmp	.+316    	; 0x250 <timer_clear>

00000114 <relay_set_off>:
    }
}

void relay_set_off(void)
{
  *relay_port &= (uint8_t)~(1<<relay_pin);
 114:	e0 91 6a 00 	lds	r30, 0x006A
 118:	f0 91 6b 00 	lds	r31, 0x006B
 11c:	20 81       	ld	r18, Z
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	00 90 69 00 	lds	r0, 0x0069
 126:	02 c0       	rjmp	.+4      	; 0x12c <relay_set_off+0x18>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <relay_set_off+0x14>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <relay_get_status>:
}

uint8_t relay_get_status(void)
{
  return error;
}
 138:	80 91 60 00 	lds	r24, 0x0060
 13c:	08 95       	ret

0000013e <relay_init>:

void relay_init(volatile uint8_t * port, uint8_t pin)
{
  relay_port = port;
 13e:	90 93 6b 00 	sts	0x006B, r25
 142:	80 93 6a 00 	sts	0x006A, r24
  relay_pin = pin;
 146:	60 93 69 00 	sts	0x0069, r22
    }
}

void relay_clear_error(void)
{
  error = RELAY_NO_ERROR;
 14a:	10 92 60 00 	sts	0x0060, r1

  // clear error flag
  relay_clear_error();
  
  // set timer to max value
  timer_set(-1);
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	7f ef       	ldi	r23, 0xFF	; 255
 152:	cb 01       	movw	r24, r22
 154:	a0 c0       	rjmp	.+320    	; 0x296 <timer_set>

00000156 <relay_set_cooldown>:
}

void relay_set_cooldown(uint32_t time)
{
  cooldown_time = time;
 156:	60 93 65 00 	sts	0x0065, r22
 15a:	70 93 66 00 	sts	0x0066, r23
 15e:	80 93 67 00 	sts	0x0067, r24
 162:	90 93 68 00 	sts	0x0068, r25
 166:	08 95       	ret

00000168 <relay_timer_inc>:
}

void relay_timer_inc(void)
{
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
  timer_inc();
 16c:	7a d0       	rcall	.+244    	; 0x262 <timer_inc>
  
  if (water_low())
 16e:	f7 d0       	rcall	.+494    	; 0x35e <water_low>
 170:	88 23       	and	r24, r24
 172:	d9 f0       	breq	.+54     	; 0x1aa <relay_timer_inc+0x42>
}

// only set error if there isn't one already
static void set_error(uint8_t new_error)
{
  if (relay_get_status() == RELAY_NO_ERROR)
 174:	80 91 60 00 	lds	r24, 0x0060
 178:	81 11       	cpse	r24, r1
 17a:	03 c0       	rjmp	.+6      	; 0x182 <relay_timer_inc+0x1a>
    {
      error = new_error;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 60 00 	sts	0x0060, r24
    }
}

void relay_set_off(void)
{
  *relay_port &= (uint8_t)~(1<<relay_pin);
 182:	e0 91 6a 00 	lds	r30, 0x006A
 186:	f0 91 6b 00 	lds	r31, 0x006B
 18a:	20 81       	ld	r18, Z
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	00 90 69 00 	lds	r0, 0x0069
 194:	02 c0       	rjmp	.+4      	; 0x19a <relay_timer_inc+0x32>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <relay_timer_inc+0x2e>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	80 83       	st	Z, r24
  else if (relay_running() && timer_get() >= maxon_time)
    {
      set_error(RELAY_ERROR_MAXON);
      relay_set_off();
    }
}
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret
  return timer_get();
}

uint8_t relay_running(void)
{
  if (*relay_port & (1<<relay_pin))
 1aa:	e0 91 6a 00 	lds	r30, 0x006A
 1ae:	f0 91 6b 00 	lds	r31, 0x006B
 1b2:	80 81       	ld	r24, Z
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	00 90 69 00 	lds	r0, 0x0069
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <relay_timer_inc+0x58>
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <relay_timer_inc+0x54>
 1c4:	80 ff       	sbrs	r24, 0
 1c6:	ee cf       	rjmp	.-36     	; 0x1a4 <relay_timer_inc+0x3c>
  if (water_low())
    {
      set_error(RELAY_ERROR_WATER_LOW);
      relay_set_off();
    }
  else if (relay_running() && timer_get() >= maxon_time)
 1c8:	6f d0       	rcall	.+222    	; 0x2a8 <timer_get>
 1ca:	00 91 61 00 	lds	r16, 0x0061
 1ce:	10 91 62 00 	lds	r17, 0x0062
 1d2:	20 91 63 00 	lds	r18, 0x0063
 1d6:	30 91 64 00 	lds	r19, 0x0064
 1da:	60 17       	cp	r22, r16
 1dc:	71 07       	cpc	r23, r17
 1de:	82 07       	cpc	r24, r18
 1e0:	93 07       	cpc	r25, r19
 1e2:	00 f3       	brcs	.-64     	; 0x1a4 <relay_timer_inc+0x3c>
}

// only set error if there isn't one already
static void set_error(uint8_t new_error)
{
  if (relay_get_status() == RELAY_NO_ERROR)
 1e4:	80 91 60 00 	lds	r24, 0x0060
 1e8:	81 11       	cpse	r24, r1
 1ea:	cb cf       	rjmp	.-106    	; 0x182 <relay_timer_inc+0x1a>
    {
      error = new_error;
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	80 93 60 00 	sts	0x0060, r24
 1f2:	c7 cf       	rjmp	.-114    	; 0x182 <relay_timer_inc+0x1a>

000001f4 <relay_set_maxon>:
    }
}

void relay_set_maxon(uint32_t time)
{
  maxon_time  = time; 
 1f4:	60 93 61 00 	sts	0x0061, r22
 1f8:	70 93 62 00 	sts	0x0062, r23
 1fc:	80 93 63 00 	sts	0x0063, r24
 200:	90 93 64 00 	sts	0x0064, r25
 204:	08 95       	ret

00000206 <relay_get_cooldown>:
}

uint32_t relay_get_cooldown()
{
  return cooldown_time;
 206:	60 91 65 00 	lds	r22, 0x0065
 20a:	70 91 66 00 	lds	r23, 0x0066
 20e:	80 91 67 00 	lds	r24, 0x0067
 212:	90 91 68 00 	lds	r25, 0x0068
}
 216:	08 95       	ret

00000218 <relay_get_maxon>:

uint32_t relay_get_maxon(void)
{
  return maxon_time;
 218:	60 91 61 00 	lds	r22, 0x0061
 21c:	70 91 62 00 	lds	r23, 0x0062
 220:	80 91 63 00 	lds	r24, 0x0063
 224:	90 91 64 00 	lds	r25, 0x0064
}
 228:	08 95       	ret

0000022a <relay_get_timer>:

uint32_t relay_get_timer(void)
{
  return timer_get();
 22a:	3e c0       	rjmp	.+124    	; 0x2a8 <timer_get>

0000022c <relay_running>:
}

uint8_t relay_running(void)
{
  if (*relay_port & (1<<relay_pin))
 22c:	e0 91 6a 00 	lds	r30, 0x006A
 230:	f0 91 6b 00 	lds	r31, 0x006B
 234:	80 81       	ld	r24, Z
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	00 90 69 00 	lds	r0, 0x0069
 23c:	02 c0       	rjmp	.+4      	; 0x242 <relay_running+0x16>
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <relay_running+0x12>
    }
  else
    {
      return 0;
    }
}
 246:	81 70       	andi	r24, 0x01	; 1
 248:	08 95       	ret

0000024a <relay_clear_error>:
    }
}

void relay_clear_error(void)
{
  error = RELAY_NO_ERROR;
 24a:	10 92 60 00 	sts	0x0060, r1
 24e:	08 95       	ret

00000250 <timer_clear>:

static uint32_t time; 

void timer_clear(void)
{
  time = 0;
 250:	10 92 6c 00 	sts	0x006C, r1
 254:	10 92 6d 00 	sts	0x006D, r1
 258:	10 92 6e 00 	sts	0x006E, r1
 25c:	10 92 6f 00 	sts	0x006F, r1
 260:	08 95       	ret

00000262 <timer_inc>:
}

void timer_inc(void)
{
  if (time < (uint32_t)-1)
 262:	80 91 6c 00 	lds	r24, 0x006C
 266:	90 91 6d 00 	lds	r25, 0x006D
 26a:	a0 91 6e 00 	lds	r26, 0x006E
 26e:	b0 91 6f 00 	lds	r27, 0x006F
 272:	8f 3f       	cpi	r24, 0xFF	; 255
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	92 07       	cpc	r25, r18
 278:	a2 07       	cpc	r26, r18
 27a:	b2 07       	cpc	r27, r18
 27c:	59 f0       	breq	.+22     	; 0x294 <timer_inc+0x32>
    {
      time++;
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	a1 1d       	adc	r26, r1
 282:	b1 1d       	adc	r27, r1
 284:	80 93 6c 00 	sts	0x006C, r24
 288:	90 93 6d 00 	sts	0x006D, r25
 28c:	a0 93 6e 00 	sts	0x006E, r26
 290:	b0 93 6f 00 	sts	0x006F, r27
 294:	08 95       	ret

00000296 <timer_set>:
    }
}

void timer_set(uint32_t set_time)
{
  time = set_time;
 296:	60 93 6c 00 	sts	0x006C, r22
 29a:	70 93 6d 00 	sts	0x006D, r23
 29e:	80 93 6e 00 	sts	0x006E, r24
 2a2:	90 93 6f 00 	sts	0x006F, r25
 2a6:	08 95       	ret

000002a8 <timer_get>:
}

uint32_t timer_get(void)
{
  return time;
 2a8:	60 91 6c 00 	lds	r22, 0x006C
 2ac:	70 91 6d 00 	lds	r23, 0x006D
 2b0:	80 91 6e 00 	lds	r24, 0x006E
 2b4:	90 91 6f 00 	lds	r25, 0x006F
}
 2b8:	08 95       	ret

000002ba <spi_init>:
#include "spislave.h"

void spi_init(void)
{
  // overflow interrupt, 3-wire, positive edge
  USICR = (1<<USIOIE) | (1<<USIWM0) | (1<<USICS1);
 2ba:	88 e5       	ldi	r24, 0x58	; 88
 2bc:	8d b9       	out	0x0d, r24	; 13
  
  // data out
  DDRB |= SPI_MISO;
 2be:	b9 9a       	sbi	0x17, 1	; 23
  
  // clear interrupt flag, reset timer
  USISR = (1<<USIOIF);
 2c0:	80 e4       	ldi	r24, 0x40	; 64
 2c2:	8e b9       	out	0x0e, r24	; 14
  
  sei();
 2c4:	78 94       	sei
 2c6:	08 95       	ret

000002c8 <spi_set_slave_read>:
}

void spi_set_slave_read(void (*read_func)(uint8_t))
{
  spi_slave_read = read_func;
 2c8:	90 93 73 00 	sts	0x0073, r25
 2cc:	80 93 72 00 	sts	0x0072, r24
 2d0:	08 95       	ret

000002d2 <spi_set_slave_write>:
}
void spi_set_slave_write(uint8_t(*write_func)(void))
{
  spi_slave_write = write_func;
 2d2:	90 93 71 00 	sts	0x0071, r25
 2d6:	80 93 70 00 	sts	0x0070, r24
 2da:	08 95       	ret

000002dc <__vector_14>:

}

ISR(USI_OVF_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
  if (USIDR != 0)
 2fe:	8f b1       	in	r24, 0x0f	; 15
 300:	81 11       	cpse	r24, r1
 302:	19 c0       	rjmp	.+50     	; 0x336 <__vector_14+0x5a>
      USIDR = spi_slave_write();
    }
  else 
    {
      // slave writes data to master
      USIDR = spi_slave_write();
 304:	e0 91 70 00 	lds	r30, 0x0070
 308:	f0 91 71 00 	lds	r31, 0x0071
 30c:	09 95       	icall
 30e:	8f b9       	out	0x0f, r24	; 15
    }

  // clear interrupt flag, reset timer
  USISR = (1<<USIOIF);
 310:	80 e4       	ldi	r24, 0x40	; 64
 312:	8e b9       	out	0x0e, r24	; 14
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti
ISR(USI_OVF_vect)
{
  if (USIDR != 0)
    {
      // slave has recieved a command
      spi_slave_read(USIDR);
 336:	8f b1       	in	r24, 0x0f	; 15
 338:	e0 91 72 00 	lds	r30, 0x0072
 33c:	f0 91 73 00 	lds	r31, 0x0073
 340:	09 95       	icall
      
      // prepare to send first byte, in case command requires it
      USIDR = spi_slave_write();
 342:	e0 91 70 00 	lds	r30, 0x0070
 346:	f0 91 71 00 	lds	r31, 0x0071
 34a:	09 95       	icall
 34c:	8f b9       	out	0x0f, r24	; 15
 34e:	e0 cf       	rjmp	.-64     	; 0x310 <__vector_14+0x34>

00000350 <water_init>:
static uint8_t water_pin = 0;


void water_init(volatile uint8_t * pins, uint8_t pin)
{
  water_pins = pins;
 350:	90 93 76 00 	sts	0x0076, r25
 354:	80 93 75 00 	sts	0x0075, r24
  water_pin = pin;
 358:	60 93 74 00 	sts	0x0074, r22
 35c:	08 95       	ret

0000035e <water_low>:


uint8_t water_low()
{
  // if pin is high
  if (*water_pins & (1<<water_pin))
 35e:	e0 91 75 00 	lds	r30, 0x0075
 362:	f0 91 76 00 	lds	r31, 0x0076
 366:	80 81       	ld	r24, Z
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	00 90 74 00 	lds	r0, 0x0074
 36e:	02 c0       	rjmp	.+4      	; 0x374 <water_low+0x16>
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <water_low+0x12>
 378:	81 70       	andi	r24, 0x01	; 1
 37a:	99 27       	eor	r25, r25
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	82 27       	eor	r24, r18
    }
  else
    {
      return 1; // water low
    }
}
 380:	81 70       	andi	r24, 0x01	; 1
 382:	08 95       	ret

00000384 <cmd_slave_read>:
  data[0] = (uint8_t)(data_int>>24);
}

void cmd_slave_read(uint8_t cmd)
{
  data_index = 0; 
 384:	10 92 77 00 	sts	0x0077, r1
  
  if (cmd == CMD_SET_ON)
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	41 f1       	breq	.+80     	; 0x3dc <cmd_slave_read+0x58>
      relay_set_on();

      // clear data in case it is read
      set_data_int(0);
    }
  else if (cmd == CMD_SET_OFF)
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	81 f1       	breq	.+96     	; 0x3f0 <cmd_slave_read+0x6c>
      relay_set_off();

      // clear data in case it is read
      set_data_int(0);
    }
  else if (cmd == CMD_GET_STATUS)
 390:	85 30       	cpi	r24, 0x05	; 5
 392:	c1 f1       	breq	.+112    	; 0x404 <cmd_slave_read+0x80>
    {
      set_data_int(relay_get_status());
    }
  else if (cmd == CMD_GET_COOLDOWN)
 394:	88 30       	cpi	r24, 0x08	; 8
 396:	09 f4       	brne	.+2      	; 0x39a <cmd_slave_read+0x16>
 398:	3f c0       	rjmp	.+126    	; 0x418 <cmd_slave_read+0x94>
    {
      set_data_int(relay_get_cooldown());
    }
  else if (cmd == CMD_GET_MAXON)
 39a:	89 30       	cpi	r24, 0x09	; 9
 39c:	09 f4       	brne	.+2      	; 0x3a0 <cmd_slave_read+0x1c>
 39e:	46 c0       	rjmp	.+140    	; 0x42c <cmd_slave_read+0xa8>
    {
      set_data_int(relay_get_maxon());
    }
  else if (cmd == CMD_GET_TIMER)
 3a0:	87 30       	cpi	r24, 0x07	; 7
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <cmd_slave_read+0x22>
 3a4:	4d c0       	rjmp	.+154    	; 0x440 <cmd_slave_read+0xbc>
    {
      set_data_int(relay_get_timer());
    }
  else if (cmd == CMD_GET_PIN)
 3a6:	84 30       	cpi	r24, 0x04	; 4
 3a8:	09 f4       	brne	.+2      	; 0x3ac <cmd_slave_read+0x28>
 3aa:	54 c0       	rjmp	.+168    	; 0x454 <cmd_slave_read+0xd0>
    {
      set_data_int(relay_running());
    }
  else if (cmd == CMD_GET_ID)
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <cmd_slave_read+0x44>
    {
      set_data_int(DEVICE_ID);
    }
  else if (cmd == CMD_CLEAR_ERROR)
 3b0:	86 30       	cpi	r24, 0x06	; 6
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <cmd_slave_read+0x32>
 3b4:	59 c0       	rjmp	.+178    	; 0x468 <cmd_slave_read+0xe4>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 3b6:	10 92 7b 00 	sts	0x007B, r1
  data[2] = (uint8_t)(data_int>>8);
 3ba:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 3be:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 3c2:	10 92 78 00 	sts	0x0078, r1
 3c6:	08 95       	ret
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 3c8:	85 e8       	ldi	r24, 0x85	; 133
 3ca:	80 93 7b 00 	sts	0x007B, r24
  data[2] = (uint8_t)(data_int>>8);
 3ce:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 3d2:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 3d6:	10 92 78 00 	sts	0x0078, r1
 3da:	08 95       	ret
{
  data_index = 0; 
  
  if (cmd == CMD_SET_ON)
    {
      relay_set_on();
 3dc:	54 de       	rcall	.-856    	; 0x86 <relay_set_on>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 3de:	10 92 7b 00 	sts	0x007B, r1
  data[2] = (uint8_t)(data_int>>8);
 3e2:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 3e6:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 3ea:	10 92 78 00 	sts	0x0078, r1
 3ee:	08 95       	ret
      // clear data in case it is read
      set_data_int(0);
    }
  else if (cmd == CMD_SET_OFF)
    {
      relay_set_off();
 3f0:	91 de       	rcall	.-734    	; 0x114 <relay_set_off>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 3f2:	10 92 7b 00 	sts	0x007B, r1
  data[2] = (uint8_t)(data_int>>8);
 3f6:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 3fa:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 3fe:	10 92 78 00 	sts	0x0078, r1
 402:	08 95       	ret
      // clear data in case it is read
      set_data_int(0);
    }
  else if (cmd == CMD_GET_STATUS)
    {
      set_data_int(relay_get_status());
 404:	99 de       	rcall	.-718    	; 0x138 <relay_get_status>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 406:	80 93 7b 00 	sts	0x007B, r24
  data[2] = (uint8_t)(data_int>>8);
 40a:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 40e:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 412:	10 92 78 00 	sts	0x0078, r1
 416:	08 95       	ret
    {
      set_data_int(relay_get_status());
    }
  else if (cmd == CMD_GET_COOLDOWN)
    {
      set_data_int(relay_get_cooldown());
 418:	f6 de       	rcall	.-532    	; 0x206 <relay_get_cooldown>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 41a:	60 93 7b 00 	sts	0x007B, r22
  data[2] = (uint8_t)(data_int>>8);
 41e:	70 93 7a 00 	sts	0x007A, r23
  data[1] = (uint8_t)(data_int>>16);
 422:	80 93 79 00 	sts	0x0079, r24
  data[0] = (uint8_t)(data_int>>24);
 426:	90 93 78 00 	sts	0x0078, r25
 42a:	08 95       	ret
    {
      set_data_int(relay_get_cooldown());
    }
  else if (cmd == CMD_GET_MAXON)
    {
      set_data_int(relay_get_maxon());
 42c:	f5 de       	rcall	.-534    	; 0x218 <relay_get_maxon>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 42e:	60 93 7b 00 	sts	0x007B, r22
  data[2] = (uint8_t)(data_int>>8);
 432:	70 93 7a 00 	sts	0x007A, r23
  data[1] = (uint8_t)(data_int>>16);
 436:	80 93 79 00 	sts	0x0079, r24
  data[0] = (uint8_t)(data_int>>24);
 43a:	90 93 78 00 	sts	0x0078, r25
 43e:	08 95       	ret
    {
      set_data_int(relay_get_maxon());
    }
  else if (cmd == CMD_GET_TIMER)
    {
      set_data_int(relay_get_timer());
 440:	f4 de       	rcall	.-536    	; 0x22a <relay_get_timer>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 442:	60 93 7b 00 	sts	0x007B, r22
  data[2] = (uint8_t)(data_int>>8);
 446:	70 93 7a 00 	sts	0x007A, r23
  data[1] = (uint8_t)(data_int>>16);
 44a:	80 93 79 00 	sts	0x0079, r24
  data[0] = (uint8_t)(data_int>>24);
 44e:	90 93 78 00 	sts	0x0078, r25
 452:	08 95       	ret
    {
      set_data_int(relay_get_timer());
    }
  else if (cmd == CMD_GET_PIN)
    {
      set_data_int(relay_running());
 454:	eb de       	rcall	.-554    	; 0x22c <relay_running>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 456:	80 93 7b 00 	sts	0x007B, r24
  data[2] = (uint8_t)(data_int>>8);
 45a:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 45e:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 462:	10 92 78 00 	sts	0x0078, r1
 466:	08 95       	ret
    {
      set_data_int(DEVICE_ID);
    }
  else if (cmd == CMD_CLEAR_ERROR)
    {
      relay_clear_error();
 468:	f0 de       	rcall	.-544    	; 0x24a <relay_clear_error>
static uint8_t data[4];  // 4 bytes of data
static uint8_t data_index = 0;

static void set_data_int(uint32_t data_int)
{
  data[3] = (uint8_t)data_int;
 46a:	10 92 7b 00 	sts	0x007B, r1
  data[2] = (uint8_t)(data_int>>8);
 46e:	10 92 7a 00 	sts	0x007A, r1
  data[1] = (uint8_t)(data_int>>16);
 472:	10 92 79 00 	sts	0x0079, r1
  data[0] = (uint8_t)(data_int>>24);
 476:	10 92 78 00 	sts	0x0078, r1
 47a:	08 95       	ret

0000047c <cmd_slave_write>:
 47c:	e0 91 77 00 	lds	r30, 0x0077
 480:	e4 30       	cpi	r30, 0x04	; 4
 482:	48 f4       	brcc	.+18     	; 0x496 <cmd_slave_write+0x1a>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	8e 0f       	add	r24, r30
 488:	80 93 77 00 	sts	0x0077, r24
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	e8 58       	subi	r30, 0x88	; 136
 490:	ff 4f       	sbci	r31, 0xFF	; 255
 492:	80 81       	ld	r24, Z
 494:	08 95       	ret
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret

0000049a <main>:
#define TIMER_WEEKS(w) (uint32_t)(w*TIMER_TICK*60UL*60UL*24UL*7UL)

int main()
{
  // init water sensor
  WATER_LOW_PORT |= (1<<WATER_LOW); // enable pull-up
 49a:	c4 9a       	sbi	0x18, 4	; 24
  water_init(&WATER_LOW_PIN, WATER_LOW);
 49c:	64 e0       	ldi	r22, 0x04	; 4
 49e:	86 e3       	ldi	r24, 0x36	; 54
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	56 df       	rcall	.-340    	; 0x350 <water_init>
  
  // init relay
  RELAY_DDR |= (1<<RELAY);
 4a4:	bb 9a       	sbi	0x17, 3	; 23
  relay_init(&RELAY_PORT, RELAY);
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	88 e3       	ldi	r24, 0x38	; 56
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	48 de       	rcall	.-880    	; 0x13e <relay_init>
  relay_set_cooldown(TIMER_HOURS(1));
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	72 ec       	ldi	r23, 0xC2	; 194
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	4f de       	rcall	.-866    	; 0x156 <relay_set_cooldown>
  relay_set_maxon(TIMER_MINUTES(31));
 4b8:	60 e8       	ldi	r22, 0x80	; 128
 4ba:	78 ee       	ldi	r23, 0xE8	; 232
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	99 de       	rcall	.-718    	; 0x1f4 <relay_set_maxon>
  
  // init timer interrupt
  TCCR0B |= (1<<CS02) | (1<<CS00);
 4c2:	83 b7       	in	r24, 0x33	; 51
 4c4:	85 60       	ori	r24, 0x05	; 5
 4c6:	83 bf       	out	0x33, r24	; 51
  TIMSK |= (1<<TOIE0);
 4c8:	89 b7       	in	r24, 0x39	; 57
 4ca:	82 60       	ori	r24, 0x02	; 2
 4cc:	89 bf       	out	0x39, r24	; 57
  
  // init spi
  spi_init();
 4ce:	f5 de       	rcall	.-534    	; 0x2ba <spi_init>
  spi_set_slave_read(cmd_slave_read);
 4d0:	82 ec       	ldi	r24, 0xC2	; 194
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	f9 de       	rcall	.-526    	; 0x2c8 <spi_set_slave_read>
  spi_set_slave_write(cmd_slave_write);
 4d6:	8e e3       	ldi	r24, 0x3E	; 62
 4d8:	92 e0       	ldi	r25, 0x02	; 2
 4da:	fb de       	rcall	.-522    	; 0x2d2 <spi_set_slave_write>

  sei();
 4dc:	78 94       	sei
 4de:	ff cf       	rjmp	.-2      	; 0x4de <main+0x44>

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
